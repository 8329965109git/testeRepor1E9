1)
You have 22 unapplied migration(s). Your project may not work properly until you apply the migrations for app(s): admin, auth, contenttypes, sessions, sites, xcv_seo.
Run 'python manage.py migrate' to apply them.
-->python-jobs>python manage.py migrate

2)
Invalid HTTP_HOST header: '127.0.0.1:8000'. You may need to add '127.0.0.1' to ALLOWED_HOSTS.
-->
ALLOWED_HOSTS = [
    'localhost',
    'pythonjobs.in',
    'www.pythonjobs.in',
    '127.0.0.1',
]

3)
Navigate to the admin panel and implement steps if required to access the admin panel. (No need to commit for this question.)
--->python manage.py createsuperuser

(surajvenv) D:\1E9\python-jobs>python manage.py createsuperuser
Username (leave blank to use 'surajthombare'): suraj@gmail.com
Email address: surajdev@gmail.com
Password:
Password (again):
This password is too short. It must contain at least 8 characters.
This password is too common.
This password is entirely numeric.
Bypass password validation and create user anyway? [y/N]: y
Superuser created successfully

4)
Change the background colour of number ‘2’ to brown. On the ‘Senior Developer Role’ page of the project.
path:templates\apply.html
<span class="fa-stack-1x fa-inverse text-center" style="font-size: 1.25em; font-weight: 900; color:brown;">2</span>

5)
Add a new app to the project, name : cars
django-admin startapp cars
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'django.contrib.sites',
    'django_extensions',
    'rangefilter',
    'xcv_core',
    'xcv_seo',
    'xcv_core.xcv_auth',
    'cars',
]

6)
Create the following models
Car model.
1. maker : String field : Foreign Key
2. car_name : String field
3. hpp : Int field
4. launch_date : Date field
Maker Model.
1. name : String field

class Maker(models.Model):
    Name=models.CharField(max_length=100)
    
    def __str__(self):
        return self.Name

class car(models.Model):
    maker=models.ForeignKey(Maker,on_delete=models.CASCADE)
    car_name=models.CharField(max_length=100)
    hpp=models.IntegerField()
    launch_date=models.DateField()

    def __str__(self):
        return self.car_name

(surajvenv) D:\1E9\python-jobs>python manage.py makemigrations
Migrations for 'cars':
  cars\migrations\0001_initial.py
    - Create model Maker
    - Create model car

(surajvenv) D:\1E9\python-jobs>python manage.py migrate
Operations to perform:
  Apply all migrations: admin, auth, cars, contenttypes, sessions, sites, xcv_seo
Running migrations:
  Applying cars.0001_initial... OK

7)
Add a simple function based view in the new app, to return “My First Function !@#”
def based(r):
    # request is handled using HttpResponse object
    return HttpResponse("My First Function !@#")

Create a route for the above step (‘cars/test/’) which displays the info returned from the function.


from django.urls import path
from . import views

urlpatterns = [
    path('cars/', views.based, name='members'),
]

urlpatterns += [
    path('test/', include('cars.urls')),
]

  http://127.0.0.1:8000/car/
  My First Function !@#

8)
Create dummy data for the Car Model with about 100 unique rows.
Path to solution

D:\1E9\python-jobs\cars\management\commands\stats.py

from django.core.management.base import BaseCommand
from faker import Faker
import random
from cars.models import car, Maker

fake = Faker()

class Command(BaseCommand):
    help = 'Creates dummy data for the Car model'

    def handle(self, *args, **options):
        num_cars_to_create = 100
        for _ in range(num_cars_to_create):
            maker, _ = Maker.objects.get_or_create(Name=fake.company())
            car_name = fake.unique.word()
            hpp = random.randint(100, 500)
            launch_date = fake.date_between(start_date="-10y", end_date="today")

            car.objects.create(maker=maker, car_name=car_name, hpp=hpp, launch_date=launch_date)

        self.stdout.write(self.style.SUCCESS(f"Created {num_cars_to_create} unique Car objects."))

9)
Create a view to display the list of Cars on the “cars/list/” route of your app.


def fetch_car_data(r):
    car_data=car.objects.all()
    my_data={'car_data':car_data}
    print("hii 16")
    return render(r,'carlist.html',context=my_data)



project level 
urlpatterns += [
     path('cars/', include('cars.urls')),
]

app level

urlpatterns = [
    path('test/', views.based, name='members'),
    path('list/', views.fetch_car_data, name='list'),
]

10)
mkdir test_data
curl -X GET http://127.0.0.1:8000/cars/list/ -o test_data/curl_output.txt

11)
Pass a suffix_string parameter to “cars/list/” route and it must be appended to every car name that is listed.

In the “cars/list/” route, only display the cars with launch date in future and Car names that start with ‘F’.
def fetch_car_data(r):
    date_today=date.today()
    # car_data=car.objects.all()
    car_data = car.objects.filter(
        launch_date__year__gt=2020,
        car_name__istartswith='C'
    )
    my_data={'car_data':car_data}
    print("Data:", car_data)
    return render(r,'carlist.html',context=my_data)


12)
def fetch_car_data(r,suffix_string):
    date_today=date.today()
    # car_data=car.objects.all()
    car_data = car.objects.filter(
        launch_date__year__gt=2020,
        car_name__istartswith='C'
    )
    car_data2 = [car.car_name + suffix_string for car in car_data]

    my_data={'car_data':car_data}
    print("Data:", car_data)
    print("hii 16")
    return render(r,'carlist.html',context=my_data)

13)
Edit the form to be displayed in the following style, edit the labels and fields as per your Maker Model
14)
Redirect the page to google.com after the form is submitted.

class MakerForm(forms.ModelForm):
    class Meta:
        # Specify the model to use for the form
        model = Maker
        # Include all fields from the 'Maker' model in the form
        fields = "__all__"


def MakerData(r):
    form = MakerForm()
    if r.method=="POST":
        form=MakerForm(r.POST)
        if form.is_valid():
            form.save()
        return HttpResponseRedirect('https://www.google.com/')
    Make_form={'Make_form':form}
    return render(r,'MakerForm.html',context=Make_form)


    <div class="container" align="Center">
      <h> Maker Form here </h>
      <form method="POST">
        {{Make_form.as_p}} {% csrf_token %}
        <input type="submit" class="btn btn-primary" name="" value="submit" />
      </form>
    </div>

15)
Add an updated_at field to the maker model which has the latest time that the instance was created or updated.

class Maker(models.Model):
    Name=models.CharField(max_length=100)
    update_date=models.DateField(blank=True, null=True)
    def __str__(self):
        return self.Name

class car(models.Model):
    maker=models.ForeignKey(Maker,on_delete=models.CASCADE)
    car_name=models.CharField(max_length=100)
    hpp=models.IntegerField()
    launch_date=models.DateField()

    def __str__(self):
        return self.car_name


class Migration(migrations.Migration):

    dependencies = [
        ('cars', '0001_initial'),
    ]

    operations = [
        migrations.AddField(
            model_name='maker',
            name='update_date',
            field=models.DateField(blank=True, null=True),
        ),
    ]

16)
Using the django shell perform basic crud operations on any one of the models. Place the screenshots in the test_data folder (Create one if not present in the project)